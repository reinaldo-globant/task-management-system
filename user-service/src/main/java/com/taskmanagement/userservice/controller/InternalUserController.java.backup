package com.taskmanagement.userservice.controller;

import com.taskmanagement.userservice.dto.UsernameRequest;
import com.taskmanagement.userservice.model.User;
import com.taskmanagement.userservice.repository.UserRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@RestController
@RequestMapping("/internal/users")
public class InternalUserController {

    private static final Logger log = LoggerFactory.getLogger(InternalUserController.class);

    @Autowired
    private UserRepository userRepository;

    @Value("${app.service.token}")
    private String internalServiceToken;

    @PostMapping("/user-id")
    public ResponseEntity<Long> getUserIdByUsername(@RequestBody UsernameRequest request) {
        
        log.info("üîç Internal request for user ID with username: {}", request.getUsername());
        
        if (request.getUsername() == null || request.getUsername().trim().isEmpty()) {
            log.warn("‚ùå Empty or null username provided");
            return ResponseEntity.badRequest().build();
        }
        
        // Find user by username
        Optional<User> userOptional = userRepository.findByUsername(request.getUsername().trim());
        if (userOptional.isEmpty()) {
            log.warn("‚ùå User not found with username: {}", request.getUsername());
            return ResponseEntity.notFound().build();
        }
        
        log.info("‚úÖ Found user ID {} for username: {}", userOptional.get().getId(), request.getUsername());
        return ResponseEntity.ok(userOptional.get().getId());
    }
    
    @PostMapping("/user-details")
    public ResponseEntity<User> getUserDetailsByUsername(@RequestBody UsernameRequest request) {
        
        log.info("üîç Internal request for user details with username: {}", request.getUsername());
        
        if (request.getUsername() == null || request.getUsername().trim().isEmpty()) {
            log.warn("‚ùå Empty or null username provided");
            return ResponseEntity.badRequest().build();
        }
        
        // Find user by username
        Optional<User> userOptional = userRepository.findByUsername(request.getUsername().trim());
        if (userOptional.isEmpty()) {
            log.warn("‚ùå User not found with username: {}", request.getUsername());
            return ResponseEntity.notFound().build();
        }
        
        log.info("‚úÖ Found user details for username: {}", request.getUsername());
        return ResponseEntity.ok(userOptional.get());
    }
    
    @GetMapping("/test")
    public ResponseEntity<String> test() {
        return ResponseEntity.ok("Internal endpoint working");
    }

    @GetMapping("/debug/users")
    public ResponseEntity<java.util.List<String>> listAllUsernames() {
        log.info("üîç Debug request: listing all usernames");
        java.util.List<String> usernames = userRepository.findAll()
                .stream()
                .map(User::getUsername)
                .collect(java.util.stream.Collectors.toList());
        
        log.info("üìã Found {} users: {}", usernames.size(), usernames);
        return ResponseEntity.ok(usernames);
    }
}